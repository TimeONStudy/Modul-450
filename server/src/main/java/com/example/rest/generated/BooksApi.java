/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.rest.generated;

import com.example.rest.generated.model.Book;
import com.example.rest.generated.model.BookList;
import com.example.rest.generated.model.RentBookRequest;
import com.example.rest.generated.model.RentBookResponse;
import com.example.rest.generated.model.ReturnBookRequest;
import com.example.rest.generated.model.ReturnBookResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-17T02:08:17.903777955+02:00[Europe/Zurich]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Books", description = "the Books API")
public interface BooksApi {

    /**
     * GET /books/{bookId} : Get a specific book by ID
     *
     * @param bookId The ID of the book to retrieve (required)
     * @return Book details (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "getBookById",
        summary = "Get a specific book by ID",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Book details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            }),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Book> getBookById(
        @Parameter(name = "bookId", description = "The ID of the book to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("bookId") String bookId
    );


    /**
     * GET /books : Retrieves all books
     * Get a list of all books in the library
     *
     * @return List of all books (status code 200)
     */
    @Operation(
        operationId = "getBooks",
        summary = "Retrieves all books",
        description = "Get a list of all books in the library",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all books", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookList.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    
    ResponseEntity<BookList> getBooks(
        
    );


    /**
     * POST /books/rent : Rent a book
     * Rent an available book to a user
     *
     * @param rentBookRequest  (required)
     * @return Book successfully rented (status code 200)
     *         or Book not available or invalid request (status code 400)
     *         or Book or user not found (status code 404)
     */
    @Operation(
        operationId = "rentBook",
        summary = "Rent a book",
        description = "Rent an available book to a user",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Book successfully rented", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RentBookResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Book not available or invalid request"),
            @ApiResponse(responseCode = "404", description = "Book or user not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books/rent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<RentBookResponse> rentBook(
        @Parameter(name = "RentBookRequest", description = "", required = true) @Valid @RequestBody RentBookRequest rentBookRequest
    );


    /**
     * POST /books/return : Return a rented book
     * Return a book that was previously rented
     *
     * @param returnBookRequest  (required)
     * @return Book successfully returned (status code 200)
     *         or Book was not rented or invalid request (status code 400)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "returnBook",
        summary = "Return a rented book",
        description = "Return a book that was previously rented",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Book successfully returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReturnBookResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Book was not rented or invalid request"),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books/return",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ReturnBookResponse> returnBook(
        @Parameter(name = "ReturnBookRequest", description = "", required = true) @Valid @RequestBody ReturnBookRequest returnBookRequest
    );

}
