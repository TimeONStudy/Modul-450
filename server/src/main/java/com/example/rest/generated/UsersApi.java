/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.rest.generated;

import com.example.rest.generated.model.BookList;
import com.example.rest.generated.model.User;
import com.example.rest.generated.model.UserList;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-17T02:08:17.903777955+02:00[Europe/Zurich]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Users", description = "the Users API")
public interface UsersApi {

    /**
     * GET /users/{userId} : Get a specific user by ID
     *
     * @param userId The ID of the user to retrieve (required)
     * @return User details (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get a specific user by ID",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<User> getUserById(
        @Parameter(name = "userId", description = "The ID of the user to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    );


    /**
     * GET /users/{userId}/rented-books : Get books rented by a user
     * Retrieve all books currently rented by a specific user
     *
     * @param userId The ID of the user (required)
     * @return List of books rented by the user (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUserRentedBooks",
        summary = "Get books rented by a user",
        description = "Retrieve all books currently rented by a specific user",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of books rented by the user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookList.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/rented-books",
        produces = { "application/json" }
    )
    
    ResponseEntity<BookList> getUserRentedBooks(
        @Parameter(name = "userId", description = "The ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    );


    /**
     * GET /users : Get all users
     * Retrieve a list of all users
     *
     * @return List of all users (status code 200)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Get all users",
        description = "Retrieve a list of all users",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all users", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserList.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserList> getUsers(
        
    );

}
