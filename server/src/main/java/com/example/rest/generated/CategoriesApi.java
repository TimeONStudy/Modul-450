/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.rest.generated;

import com.example.rest.generated.model.BookList;
import com.example.rest.generated.model.CategoryList;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-10T14:14:03.624390+02:00[Europe/Zurich]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Categories", description = "the Categories API")
public interface CategoriesApi {

    /**
     * GET /categories/{categoryId}/books : Get books by category
     * Retrieve all books in a specific category
     *
     * @param categoryId The ID of the category (required)
     * @return List of books in the category (status code 200)
     *         or Category not found (status code 404)
     */
    @Operation(
        operationId = "getBooksByCategory",
        summary = "Get books by category",
        description = "Retrieve all books in a specific category",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of books in the category", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookList.class))
            }),
            @ApiResponse(responseCode = "404", description = "Category not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories/{categoryId}/books",
        produces = { "application/json" }
    )
    
    ResponseEntity<BookList> getBooksByCategory(
        @Parameter(name = "categoryId", description = "The ID of the category", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") String categoryId
    );


    /**
     * GET /categories : Get all book categories
     * Retrieve a list of all book categories
     *
     * @return List of all categories (status code 200)
     */
    @Operation(
        operationId = "getCategories",
        summary = "Get all book categories",
        description = "Retrieve a list of all book categories",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all categories", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryList.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories",
        produces = { "application/json" }
    )
    
    ResponseEntity<CategoryList> getCategories(
        
    );

}
